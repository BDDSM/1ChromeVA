&НаКлиенте
Перем ТестКлиент, ГлавноеОкноТестКлиента, ФормаТоваров, ФормаНовогоТовара;

&НаКлиенте
Перем ВводимыйТекст, ТекстКомментария, ИмяВнешнейКомпоненты, АдресВебСокет;

&НаКлиенте
Перем ИдентификаторКомпоненты, ВнешняяКомпонента;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИдентификаторКлиента = ПолучитьНовыйИдентификатор();
	АдресURL = ПолучитьСтрокуЗапуска(ИдентификаторКлиента);

	JavaScript = "
	|arrow('ФормаКоманднаяПанельСписокСтрокаПоиска', border('ФормаСоздать', 5000), 5000);
	|setTimeout(() => (arrow(selected(), border('ФормаКоманднаяПанельСписокСтрокаПоиска', 5000), 5000, { color: 'green' })), 5000);
	|setTimeout(() => (arrow({ x: '80%', y: '70%' }, { x: '20%', y: '30%' }, 5000, { color: 'blue' })), 10000);
	|setTimeout(() => (arrow({ x: '80%', y: '70%' }, border('ФормаСоздать', 5000), 5000, { color: 'green' })), 15000);
	|setTimeout(() => (border({ left: 100, top: 200, height: 100, width: 200 }, 5000)), 20000);
	|setTimeout(() => (arrow({ x: '80%', y: '70%' }, { x: '20%', y: '30%' }, 5000, { color: 'blue' })), 25000);	
	|";
	
	ТекстJSON = "{id: 1, method:'Page.captureScreenshot', params:{format:'png', quality=85, fromSurface:false}}";
	
	МакетКомпоненты = ПолучитьОбщийМакет("VA_1cWinCtrl");
	МестоположениеКомпоненты = ПоместитьВоВременноеХранилище(МакетКомпоненты, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьНовыйИдентификатор()
	
	Возврат "X" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуЗапуска(ИдентификаторКлиента)
	
	Возврат "https://ya.ru/";
	
	Возврат "http://localhost/demo/?N=Администратор&P=&L=ru&VL=ru&DisableStartupMessages&DisplayAllFunctions&EnableCheckModal&O=Normal&TESTCLIENT&TESTCLIENTID=" + ИдентификаторКлиента;
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьТекстМакета(ИмяМакета)
	
	Возврат ПолучитьОбщийМакет(ИмяМакета).ПолучитьТекст();
	
КонецФункции	

&НаКлиенте
Процедура ВыполнитьПодключениеВнешнейКомпоненты(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещения, МестоположениеКомпоненты, ИдентификаторКомпоненты, ТипВнешнейКомпоненты.Native); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодключениеВнешнейКомпонентыЗавершение(Подключение, ДополнительныеПараметры) Экспорт
	
	Если Подключение Тогда
		ВнешняяКомпонента = Новый("AddIn." + ИдентификаторКомпоненты + ".WindowsControl");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученаВерсияКомпоненты", ЭтотОбъект);
		ВнешняяКомпонента.НачатьПолучениеВерсия(ОписаниеОповещения);
	ИначеЕсли ДополнительныеПараметры = Истина Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключениеВнешнейКомпоненты", ЭтотОбъект, Ложь);
		НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, МестоположениеКомпоненты);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолученаВерсияКомпоненты(Значение, ДополнительныеПараметры) Экспорт
	
	Заголовок = "Управление окнами, версия " + Значение;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Отказ = Истина;
		Возврат;
	#КонецЕсли
	
	ИдентификаторКомпоненты = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	ВыполнитьПодключениеВнешнейКомпоненты(Истина);
	
	СисИнфо = Новый СистемнаяИнформация;
	
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
	
		Shell = Новый COMОбъект("WScript.Shell");
	    ProgramFiles = Shell.ExpandEnvironmentStrings("%ProgramFiles%");   	
		
		ИмяФайла = "\Google\Chrome\Application\chrome.exe";
		Файл = Новый Файл(ProgramFiles + ИмяФайла);
		Если Файл.Существует() Тогда
			ФайлПриложения = Файл.ПолноеИмя;
		Иначе
		    ProgramFiles = Shell.ExpandEnvironmentStrings("%ProgramFiles(x86)%");   	
			Файл = Новый Файл(ProgramFiles + ИмяФайла);
			Если Файл.Существует() Тогда
				ФайлПриложения = Файл.ПолноеИмя;
			Иначе
				Сообщить("Не найден исполняемый файл Google Chrome");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйИдентификатор(Команда)

	ИдентификаторКлиента = ПолучитьНовыйИдентификатор();
	АдресURL = ПолучитьСтрокуЗапуска(ИдентификаторКлиента);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТест(Команда)
	
	ТекстJavaScript = ПолучитьТекстМакета("VA_jQuery") + ПолучитьТекстМакета("VA_JavaScript") + ПолучитьТекстМакета("VA_LeaderLine");
	ВыполнитьJavaScript(ТекстJavaScript);
	Возврат;
	
	
	ТестКлиент = Неопределено;
	ГлавноеОкноТестКлиента = Неопределено;
	ФормаТоваров = Неопределено;
	ФормаНовогоТовара = Неопределено;
	
	// Установить соединение с клиентом тестирования.
	ТестКлиент = Новый ТестируемоеПриложение("MOSRLU1C06", 1541, ИдентификаторКлиента);
	
	// 5 раз повторить попытку установить соединение, так как приложение может запускаться медленно.
	МаксИтераций = 5;
	Для Счетчик = 1 По МаксИтераций Цикл
	
		Попытка
			ТестКлиент.УстановитьСоединение();
			Прервать;
			
		Исключение
			
			// Вывести только последнее сообщение.
			Если Счетчик = МаксИтераций Тогда
				Сообщить(ОписаниеОшибки());
				Возврат;
				
			КонецЕсли;	
			
		КонецПопытки;
	
	КонецЦикла;   // установка соединения с клиентом тестирования
	
	Для каждого ТекущееОкно из ТестКлиент.ПолучитьПодчиненныеОбъекты() Цикл
		Если Не ТекущееОкно.Основное Тогда
			ТекущееОкно.Закрыть(); 
		КонецЕсли;
	КонецЦикла;
	
	ТекстJavaScript = ПолучитьТекстМакета("VA_jQuery") + ПолучитьТекстМакета("VA_JavaScript") + ПолучитьТекстМакета("VA_LeaderLine");
	ВыполнитьJavaScript(ТекстJavaScript);
	
	// Найти главное окно приложения.По началау заголовка окна "Демонстрационная конфигурация..."
	ГлавноеОкноТестКлиента = ТестКлиент.ПолучитьАктивноеОкно();
	Для каждого ДочернееОкно из ТестКлиент.ПолучитьПодчиненныеОбъекты() Цикл
		Если Не ДочернееОкно.Основное Тогда 
			ДочернееОкно.Закрыть();
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("ВыполнитьТест_Шаг1", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТест_Шаг1()
	
	// Перейти в раздел "Товарные запасы". 
	// Навигационную ссылку можно получить интерактивно, находясь в разделе "Товарные запасы",
	// команда "Получить ссылку..." Ctrl+F11 
	ГлавноеОкноТестКлиента.ВыполнитьКоманду("e1cib/navigationpoint/VA_Подсистема");
	
	// Открыть список справочника "Товары". 
	// Навигационную ссылку можно получить интерактивно, находясь в разделе "Товарные запасы"
	// при открытом списке товаров, команда "Получить ссылку..." Ctrl+F11 
	ГлавноеОкноТестКлиента.ВыполнитьКоманду("e1cib/navigationpoint/VA_Подсистема/Справочник.VA_ПримерДанных.Команда.ОткрытьСписок");
	
	Скрипт = "arrow({x:'10%', y:'60%'}, border('ФормаСоздать', 5000), 5000, {color:'red', size: 5});";
	ВыполнитьJavaScript(Скрипт);
	
	ПодключитьОбработчикОжидания("ВыполнитьТест_Шаг2", 5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТест_Шаг2()
	
	// Если список товаров не открылся за 60 секунд, прекратить тестирование. 
	// 60 секунд - стандартное значение 4-го параметра метода ОжидатьОтображениеОбъекта(). 
	Если НЕ ТестКлиент.ОжидатьОтображениеОбъекта(Тип("ТестируемаяФорма"), "VA.Пример данных*", , 10) Тогда
		Сообщить("Не удалось открыть форму списка справочника ""Товары"" в течение 10 секунд.");
		Возврат;
	КонецЕсли;
	
	// Получить форму списка справочника "Товары".
	ФормаТоваров = ТестКлиент.НайтиОбъект(Тип("ТестируемаяФорма"), "VA.Пример данных*");

	//////////////////////////////////////////////////////////
	// *** Выполнить тест - добавить и записать новый товар.
	
	// Открыть форму нового товара.
	// Навигационная ссылка: "e1cib/command/" + <имя стандартной команды>.
    ГлавноеОкноТестКлиента.ВыполнитьКоманду("e1cib/command/Справочник.VA_ПримерДанных.Команда.Создать");
	
	// Если форма нового товара не открылась за 60 секунд, прекратить тестирование.
	Если НЕ ТестКлиент.ОжидатьОтображениеОбъекта(Тип("ТестируемаяФорма"), "VA.Пример*", , 10) Тогда
		Сообщить("Не удалось открыть форму нового товара в течение 10 секунд.");
		Возврат;
		
	КонецЕсли;
	
	Скрипт = "arrow(border('ФормаСоздать', 5000), 'Наименование', 5000, {color:'red', size: 5});";
	ВыполнитьJavaScript(Скрипт);
	
	ПодключитьОбработчикОжидания("ВыполнитьТест_Шаг3", 5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТест_Шаг3()
	
	ДатаВремя = ТекущаяДата();
	ВводимыйТекст = Формат(ДатаВремя, "ДЛФ=DDT");
	ДатаВремя = Час(ДатаВремя) + Минута(ДатаВремя) / 100;
	ФормСтрока = "Л = ru_RU; ДП = Истина";
	ПарПредмета="час,часа,часов,м,минуте,минуты,минут,ж,2";
	ТекстКомментария = ЧислоПрописью(ДатаВремя, ФормСтрока, ПарПредмета);
	
	// Получить форму нового товара.
	ФормаНовогоТовара = ТестКлиент.НайтиОбъект(Тип("ТестируемаяФорма"), "VA.Пример*(создание)");
	
	// Заполнить поле "Наименование", оно активно после открытия формы.
	ПолеНаименование = ФормаНовогоТовара.НайтиОбъект(Тип("ТестируемоеПолеФормы"), , "Наименование");
	ПолеНаименование.ВвестиТекст(ВводимыйТекст);
	
	Скрипт = "arrow({x:'20%', y:'70%'}, border('Комментарий', 5000), 5000, {color:'red', size: 3});";
	ВыполнитьJavaScript(Скрипт);
	
	ПодключитьОбработчикОжидания("ВыполнитьТест_Шаг4", 5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТест_Шаг4()
	
		
	// Заполнить поле "Артикул". 
	// Оно неактивно, поэтому перед заполнением нужно его активизировать.
	ПолеАртикул = ФормаНовогоТовара.НайтиОбъект(Тип("ТестируемоеПолеФормы"), , "Комментарий");
	ПолеАртикул.Активизировать();
	ПолеАртикул.ВвестиТекст("Текущее время: " + ТекстКомментария);
	
	// Записать и закрыть новый товар, нажав на кнопку "Записать и закрыть".
	КнопкаЗаписатьИЗакрыть = ФормаНовогоТовара.НайтиОбъект(Тип("ТестируемаяКнопкаФормы"), "Записать и закрыть");
	КнопкаЗаписатьИЗакрыть.Нажать();
	
	///////////////////////////////////////////////////////////////////////////////////////////////
	// *** Проверить выполнение теста - найти записанный новый товар в списке и прочитать его поля.

	// Получить таблицу товаров из формы списка товаров.
	СписокТоваров = ФормаТоваров.НайтиОбъект(Тип("ТестируемаяТаблицаФормы"), "Список*");
	
	// Встать в начало таблицы.
	СписокТоваров.ПерейтиКПервойСтроке();
	
	// Найти в таблице строку с тестируемым товаром по наименованию товара.
	ТестируемыйТоварНайден = Ложь;
	Пока Истина Цикл
   		НаименованиеТовара = СписокТоваров.ПолучитьТекстЯчейки("Наименование");

  		// Это искомый товар - выходим из цикла.
   		Если НаименованиеТовара = ВводимыйТекст Тогда
    		ТестируемыйТоварНайден = Истина;
    		Прервать;

   		КонецЕсли; 

   		// Это не тот товар - переходим к следующей строке, если она есть.
   		Попытка
      		// Если следующей строки нет, будет исключение и мы выйдем из цикла
      		СписокТоваров.ПерейтиКСледующейСтроке();
   		Исключение
      		Прервать;
   		КонецПопытки; 
	КонецЦикла;
	
	Скрипт = "arrow(selected(), 'ФормаКоманднаяПанельСписокСтрокаПоиска', 5000, {color:'red', size: 3});";
	ВыполнитьJavaScript(Скрипт);

	ТестКлиент = Неопределено;
	ГлавноеОкноТестКлиента = Неопределено;
	ФормаТоваров = Неопределено;
	ФормаНовогоТовара = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура Демонстрация(Команда)
	ВыполнитьJavaScript(JavaScript);
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьБраузер(Команда)
	
	СтрокаКоманды = """" + ФайлПриложения + """ --remote-debugging-port=9222 about:blank";
	НачатьЗапускПриложения(Новый ОписаниеОповещения, СтрокаКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьКлиентТестирования(Команда)
	
	HTTPЗапрос = Новый HTTPЗапрос("/json/new?" + ПолучитьСтрокуЗапуска(ИдентификаторКлиента));
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 9222, , , , 10);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	ххТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ххТекстJSON);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	Сообщить(ДанныеJSON.webSocketDebuggerUrl);
	АдресВебСокет = ДанныеJSON.webSocketDebuggerUrl;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьJavaScript(ТекстJavaScript)
	
	ПараметрыМетода = Новый Структура("expression", ТекстJavaScript);
	ДанныеJSON = Новый Структура("id,method,params", 1, "Runtime.evaluate", ПараметрыМетода);
	ЗаписьJSON = новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	КомандаJSON = ЗаписьJSON.Закрыть();
	
	ВнешняяКомпонента.НачатьВызовВебСокет(Новый ОписаниеОповещения, АдресВебСокет, КомандаJSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСнимокЭкрана(Команда)

	ПараметрыМетода = Новый Структура("format,quality,fromSurface", "png", 85, Ложь);
	ДанныеJSON = Новый Структура("id,method,params", 1, "Page.captureScreenshot", ПараметрыМетода);

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	КомандаJSON = ЗаписьJSON.Закрыть();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСнимокЭкрана", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовВебСокет(ОписаниеОповещения, АдресВебСокет, КомандаJSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученСнимокЭкрана(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(РезультатВызова);
	ДанныеJSON = ПрочитатьJSON(ЧтениеJSON);
	Если ДанныеJSON.Свойство("result") Тогда
		ДвоичныеДанные = Base64Значение(ДанныеJSON.result.data);
		СнимокЭкрана = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПриложенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбранФайлБраузера", ЭтотОбъект);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранФайлБраузера(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Для каждого ЭлементМассива из ВыбранныеФайлы Цикл
			ФайлПриложения = ЭлементМассива;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Отказ = НЕ ЗавершениеРаботы;
	
КонецПроцедуры
