&НаКлиенте
Перем Протокол, ИдентификаторКомпоненты, ВнешняяКомпонента;

&НаСервереБезКонтекста
Функция ПрочитатьСтрокуJSON(ТекстJSON)
	
	Если ПустаяСтрока(ТекстJSON) Тогда
		Возврат Новый Структура;
	КонецЕсли;

	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	Возврат ПрочитатьJSON(ЧтениеJSON, Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьСтрокуJSON(ДанныеJSON)
	
	ЗаписьJSON = новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеJSON);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	МакетКомпоненты = ПолучитьОбщийМакет("VA_1cWinCtrl");
	Объект.component = ПоместитьВоВременноеХранилище(МакетКомпоненты, УникальныйИдентификатор);
	
	Объект.URL = "https://github.com/lintest/1ChromeVA";
	Объект.port = 9222;
	Объект.domain = "Runtime";
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодключениеВнешнейКомпоненты(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключениеВнешнейКомпонентыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеВнешнейКомпоненты(ОписаниеОповещения, Объект.component, ИдентификаторКомпоненты, ТипВнешнейКомпоненты.Native); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ПодключениеВнешнейКомпонентыЗавершение(Подключение, ДополнительныеПараметры) Экспорт
	
	Если Подключение Тогда
		ВнешняяКомпонента = Новый("AddIn." + ИдентификаторКомпоненты + ".WindowsControl");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолученаВерсияКомпоненты", ЭтотОбъект);
		ВнешняяКомпонента.НачатьПолучениеВерсия(ОписаниеОповещения);
	ИначеЕсли ДополнительныеПараметры = Истина Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьПодключениеВнешнейКомпоненты", ЭтотОбъект, Ложь);
		НачатьУстановкуВнешнейКомпоненты(ОписаниеОповещения, Объект.component);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПолученаВерсияКомпоненты(Значение, ДополнительныеПараметры) Экспорт
	
	Заголовок = "Chrome DevTools protocol, version " + Значение;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИдентификаторКомпоненты = "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	ВыполнитьПодключениеВнешнейКомпоненты(Истина);
	
	#Если ТонкийКлиент Тогда
	СисИнфо = Новый СистемнаяИнформация;
	Если СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 
		ИЛИ СисИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
	
		Shell = Новый COMОбъект("WScript.Shell");
	    ProgramFiles = Shell.ExpandEnvironmentStrings("%ProgramFiles%");   	
		
		ИмяФайла = "\Google\Chrome\Application\chrome.exe";
		Файл = Новый Файл(ProgramFiles + ИмяФайла);
		Если Файл.Существует() Тогда
			Объект.browser = Файл.ПолноеИмя;
		Иначе
		    ProgramFiles = Shell.ExpandEnvironmentStrings("%ProgramFiles(x86)%");   	
			Файл = Новый Файл(ProgramFiles + ИмяФайла);
			Если Файл.Существует() Тогда
				Объект.browser = Файл.ПолноеИмя;
			Иначе
				Сообщить("Не найден исполняемый файл Google Chrome");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьБраузер(Команда)
	
	СтрокаКоманды = """" + Объект.browser + """ about:blank --remote-debugging-port=" + Формат(Объект.port, "ЧГ=");
	НачатьЗапускПриложения(Новый ОписаниеОповещения, СтрокаКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоманды(Команда)
	
	HTTPЗапрос = Новый HTTPЗапрос("/json/protocol");
	HTTPСоединение = Новый HTTPСоединение("localhost", 9222, , , , 10);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	Протокол = ПрочитатьСтрокуJSON(ТекстJSON);
	
	СписокВыбора = Элементы.Домен.СписокВыбора;
	СписокВыбора.Очистить();
	Для каждого Элемент из Протокол.Получить("domains") Цикл
		СписокВыбора.Добавить(Элемент.Получить("domain"));
	КонецЦикла;
	СписокВыбора.СортироватьПоЗначению();
	ДоменПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьURL(Команда)
	
	HTTPЗапрос = Новый HTTPЗапрос("/json/new?" + Объект.URL);
	
	HTTPСоединение = Новый HTTPСоединение("localhost", 9222, , , , 10);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	Объект.WS = ПрочитатьСтрокуJSON(ТекстJSON);
	
	
	HTTPЗапрос = Новый HTTPЗапрос("/json/protocol");
	HTTPСоединение = Новый HTTPСоединение("localhost", 9222, , , , 10);
	HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	ТекстJSON = HTTPОтвет.ПолучитьТелоКакСтроку();
	Протокол = ПрочитатьСтрокуJSON(ТекстJSON);
	
	СписокВыбора = Элементы.Домен.СписокВыбора;
	СписокВыбора.Очистить();
	Для каждого Элемент из Протокол.Получить("domains") Цикл
		СписокВыбора.Добавить(Элемент.Получить("domain"));
	КонецЦикла;
	СписокВыбора.СортироватьПоЗначению();
	ДоменПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьJavaScript(ТекстJavaScript)
	
	ПараметрыМетода = Новый Структура("expression", ТекстJavaScript);
	ДанныеJSON = Новый Структура("id,method,params", 1, "Runtime.evaluate", ПараметрыМетода);
	КомандаJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
	ВнешняяКомпонента.НачатьВызовВебСокет(Новый ОписаниеОповещения, Объект.WS, КомандаJSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСнимокЭкрана(Команда)

	ПараметрыМетода = Новый Структура("format,quality,fromSurface", "png", 85, Ложь);
	ДанныеJSON = Новый Структура("id,method,params", 1, "Page.captureScreenshot", ПараметрыМетода);
	КомандаJSON = ЗаписатьСтрокуJSON(ДанныеJSON);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолученСнимокЭкрана", ЭтотОбъект);
	ВнешняяКомпонента.НачатьВызовВебСокет(ОписаниеОповещения, Объект.WS, КомандаJSON);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученСнимокЭкрана(РезультатВызова, ПараметрыВызова, ДополнительныеПараметры) Экспорт
	
	ДанныеJSON = ПрочитатьСтрокуJSON(РезультатВызова);
	Если ДанныеJSON.Свойство("result") Тогда
		ДвоичныеДанные = Base64Значение(ДанныеJSON.result.data);
		СнимокЭкрана = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ФайлПриложенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбранФайлБраузера", ЭтотОбъект);
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранФайлБраузера(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныеФайлы) = Тип("Массив") Тогда
		Для каждого ЭлементМассива из ВыбранныеФайлы Цикл
			Объект.browser = ЭлементМассива;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоменПриИзменении(Элемент)
	
	КомандыБраузера.Очистить();
	Для каждого Элемент из Протокол.Получить("domains") Цикл
		Если Элемент.Получить("domain") = Объект.domain Тогда
			Для каждого ЭлементКоманда из Элемент.Получить("commands") Цикл
				Стр = КомандыБраузера.Добавить();
				Стр.name = ЭлементКоманда.Получить("name");
				Стр.description = ЭлементКоманда.Получить("description");
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	КомандыБраузера.Сортировать("name");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьТест(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомандыБраузераПриАктивизацииСтроки(Элемент)
	
	ПараметрыКоманды.Очистить();
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для каждого ЭлементДомен из Протокол.Получить("domains") Цикл
		Если ЭлементДомен.Получить("domain") = Объект.domain Тогда
			Для каждого ЭлементКоманда из ЭлементДомен.Получить("commands") Цикл
				Если ЭлементКоманда.Получить("name") = Элемент.ТекущиеДанные.name Тогда
					МасивПараметров = ЭлементКоманда.Получить("parameters") ;
					Если МасивПараметров = Неопределено Тогда Продолжить; КонецЕсли;
					Для каждого ЭлементПараметр из МасивПараметров Цикл
						Стр = ПараметрыКоманды.Добавить();
						Стр.name = ЭлементПараметр.Получить("name");
						Стр.description = ЭлементПараметр.Получить("description");
						Стр.type = ЭлементПараметр.Получить("type");
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ПараметрыКоманды.Сортировать("name");
	
КонецПроцедуры
